#!/usr/bin/php
<?php
/**
 * Requirements :
 * - pint should be installed globally
 * `composer global require laravel/pint`
 * you should have a pinter.json file nearby pinter binary.
 * this json should have 2 entries 
 * - pint : the pint binary path to use
 * - pint.json : the config file to use
 * Improvements :
 * - pinter.json 
 *      - add some settings to exclude folders 
 *      - add some settings to exclude specific files 
 */

if($argc<2){
    echo 'This script will format the php file you are passing as parameter'.PHP_EOL;
    echo 'Should be use with a "run on save" addon from your IDE.'.PHP_EOL;
    echo 'Usage: pinter file1.php path/to/file2.php'.PHP_EOL;
    exit(0);
}

// get pinter path from binary or symlink that run.
$pinterPath = getPinterPath($argv[0]);
// check config is ok.
list($pintBinaryPath, $pintJsonConfigPath) = checkPinterConfig($pinterPath);

// extract folder that are excluded from formatting
$foldersToExclude = getExcludedFoldersFromConfig($pintJsonConfigPath);

// parsing arguments
$filesOfFoldersToFormat = [];
for ($i = 1; $i < $argc; $i++) {
    if (shouldBeExcluded($argv[$i], $foldersToExclude)) {
        continue;
    }
    $filesOfFoldersToFormat[] = $argv[$i];
}

if (count($filesOfFoldersToFormat)) {
    $command = "{$pintBinaryPath} --config {$pintJsonConfigPath} " . implode(' ', $filesOfFoldersToFormat) ;
    echo $command . PHP_EOL;
    passthru($command, $result);
    if ($result !== 0){
        throw new RuntimeException("Command {{$command}} has failed.");
    }
    exit(0);
}
echo '=====================================' . PHP_EOL;
echo 'Nothing to do.' . PHP_EOL;
echo '=====================================' . PHP_EOL;
exit(0);

/*
|--------------------------------------------------------------------------
| helpers & functions
|--------------------------------------------------------------------------
*/

function shouldBeExcluded(string $path, array $excludeFolders): bool
{
    $excludeFilePath = [];

    // specific file to be excluded
    if (in_array($path, $excludeFilePath)) {
        return true;
    }

    // file in a folder that shouldn't be formatted
    $folderPath = '';
    $folders    = explode(DIRECTORY_SEPARATOR, pathinfo($path, PATHINFO_DIRNAME));
    foreach ($folders as $folder) {
        $folderPath .= $folder;
        if (in_array($folderPath, $excludeFolders)) {
            return true;
        }
        $folderPath .= DIRECTORY_SEPARATOR;
    }

    return false;
}

function getPinterPath(string $binaryPath): string 
{
    $pinterPath = __DIR__ . DIRECTORY_SEPARATOR;
    if(is_link($binaryPath)){
        $pinterPath = pathinfo($binaryPath, PATHINFO_DIRNAME);
    }

    return $pinterPath . DIRECTORY_SEPARATOR;
}

/**
 * extract (from pint.json) the folders that are not allowed to be formatted.
 * 
 * @param string $pintJsonConfigPath 
 * @return array 
 */
function getExcludedFoldersFromConfig(string $pintJsonConfigPath): array 
{
    $defaultFoldersToExclude = ['vendor'];
    //extract folder that are excluded from formatting (if any)
    $pintConfig = json_decode(file_get_contents($pintJsonConfigPath), true);
    return isset($pintConfig['exclude']) ? array_merge($pintConfig['exclude'], $defaultFoldersToExclude) : $defaultFoldersToExclude;
}

function checkPinterConfig(string $pinterPath): array
{
    // get pinter config file
    $pinterConfigPath = $pinterPath . DIRECTORY_SEPARATOR . 'pinter.json';
    var_dump('checkPinterConfig : '.$pinterConfigPath);
    $pinterConfig = [];
    if (!file_exists($pinterConfigPath)){
        throw new RuntimeException("pinter.json config file is missing. Should be nearby pinter.");
    }

    // extract pint binary and pint.json path from pinter.json config.
    $pinterConfig = json_decode(file_get_contents($pinterConfigPath), true);

    // 
    if (!file_exists($pinterConfig['pint']) || !is_executable($pinterConfig['pint'])) {
        throw new RuntimeException("Pint binary file is either missing or not executable.");
    }

    

    if (!file_exists($pinterConfig['pint.json'])) {
        throw new RuntimeException("pint.json config is missing or invalid.");
    }

    return [$pinterConfig['pint'], $pinterConfig['pint.json']];
}
